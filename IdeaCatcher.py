# ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà                   ‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà                                                                ‚ñà‚ñà‚ñà‚ñà‚ñà     
#‚ñë‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñë‚ñà‚ñà‚ñà                   ‚ñë‚ñë‚ñà‚ñà‚ñà      ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà                                                              ‚ñë‚ñë‚ñà‚ñà‚ñà      
# ‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà   ‚ñë‚ñë‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà             ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  
# ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà 
# ‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë   ‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñë ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñë  ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà 
# ‚ñë‚ñà‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë   ‚ñë‚ñë‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà              ‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñà     ‚ñë‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñà 
# ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà              ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà
#‚ñë‚ñë‚ñë‚ñë‚ñë   ‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë   ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë    ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë     ‚ñë‚ñë‚ñë‚ñë‚ñë                ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë      ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë                                                                                                                                 
# meta developer: @wiley_station
# meta icon: https://example.com/moodmirror_icon.png
# meta banner: https://example.com/moodmirror_banner.png

import logging
import random
import datetime
from hikkatl.tl.functions.channels import CreateChannelRequest
from .. import loader, utils

__version__ = (0, 0, 2)

logger = logging.getLogger(__name__)

@loader.tds
class IdeaCatcher(loader.Module):
    """–õ–æ–≤–∏—Ç –∏ —Ö—Ä–∞–Ω–∏—Ç —Ç–≤–æ–∏ –∏–¥–µ–∏ —Å —Ç–µ–≥–∞–º–∏"""

    strings = {
        "name": "IdeaCatcher",
        "idea_added": "üí° –ò–¥–µ—è –∑–∞–ø–∏—Å–∞–Ω–∞: {idea}\n–¢–µ–≥–∏: {tags}",
        "no_ideas": "ü§î –ü–æ–∫–∞ –Ω–µ—Ç –∏–¥–µ–π. –î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é .idea!",
        "ideas_list": "üìú –¢–≤–æ–∏ –∏–¥–µ–∏ –ø–æ —Ç–µ–≥—É #{tag}:\n{ideas}",
    }

    strings_ru = {
        "name": "IdeaCatcher",
        "idea_added": "üí° –ò–¥–µ—è –∑–∞–ø–∏—Å–∞–Ω–∞: {idea}\n–¢–µ–≥–∏: {tags}",
        "no_ideas": "ü§î –ü–æ–∫–∞ –Ω–µ—Ç –∏–¥–µ–π. –î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é .idea!",
        "ideas_list": "üìú –¢–≤–æ–∏ –∏–¥–µ–∏ –ø–æ —Ç–µ–≥—É #{tag}:\n{ideas}",
    }

    def __init__(self):
        self.chat = None
        self.base_tags = ["–≥–µ–Ω–∏–∞–ª—å–Ω–æ", "–±—Ä–µ–¥", "–Ω–∞–¥–æ_–ø—Ä–æ–≤–µ—Ä–∏—Ç—å", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "—Å—Ä–æ—á–Ω–æ", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–∑–∞–¥—É–º–∫–∞"]
        self.context_tags = {
            "—Ä–∞–±–æ—Ç–∞": ["—Ä–∞–±–æ—Ç–∞", "–ø—Ä–æ–µ–∫—Ç", "–∑–∞–¥–∞—á–∞", "–æ—Ñ–∏—Å", "–∫–æ–¥"],
            "–æ—Ç–¥—ã—Ö": ["–æ—Ç–¥—ã—Ö", "—Ä–µ–ª–∞–∫—Å", "–≤—ã—Ö–æ–¥–Ω—ã–µ", "—Å–æ–Ω", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ"],
            "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ": ["–∏–¥–µ—è", "—Ä–∏—Å—É–Ω–æ–∫", "–º—É–∑—ã–∫–∞", "—Ç–µ–∫—Å—Ç", "–¥–∏–∑–∞–π–Ω"],
            "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": ["–±–æ—Ç", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–≥–∏—Ç", "—Å–µ—Ä–≤–µ—Ä", "–∞–ø–∏"],
            "–∂–∏–∑–Ω—å": ["–¥–µ–Ω—å", "–ø–ª–∞–Ω", "—Ü–µ–ª—å", "–º–µ—á—Ç–∞", "–≤—Ä–µ–º—è"]
        }

    async def client_ready(self):
        """–°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–π"""
        try:
            async for dialog in self._client.iter_dialogs():
                if dialog.title == "hikka-ideas":
                    self.chat = dialog.entity
                    break
            if not self.chat:
                chat = await self._client(CreateChannelRequest(
                    title="hikka-ideas",
                    about="–ú–æ–∏ –∏–¥–µ–∏, –ø–æ–π–º–∞–Ω–Ω—ã–µ Hikka",
                    broadcast=False,
                    megagroup=True
                ))
                self.chat = chat.chats[0]
            logger.info(f"–ì—Ä—É–ø–ø–∞ –¥–ª—è –∏–¥–µ–π: {self.chat.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")

    def get_tags(self, text):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞"""
        text = text.lower()
        tags = [random.choice(self.base_tags)]  # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–≥

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ç–µ–≥–∏
        for tag, keywords in self.context_tags.items():
            if any(keyword in text for keyword in keywords):
                tags.append(tag)

        return tags

    @loader.command(ru_doc="–ó–∞–ø–∏—Å–∞—Ç—å –∏–¥–µ—é")
    async def idea(self, message):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –∏–¥–µ—é"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "–ù–∞–ø–∏—à–∏ –∏–¥–µ—é –ø–æ—Å–ª–µ .idea!")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏
        tags = self.get_tags(args)
        timestamp = datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        idea_text = f"[{timestamp}] {args} {' '.join(f'#{tag}' for tag in tags)}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        await self._client.send_message(self.chat, idea_text)
        await utils.answer(message, self.strings["idea_added"].format(idea=args, tags=" ".join(f"#{tag}" for tag in tags)))

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –∏–¥–µ–∏ –ø–æ —Ç–µ–≥—É")
    async def ideas(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–¥–µ–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç–µ–≥—É"""
        tag = utils.get_args_raw(message)
        if not tag:
            await utils.answer(message, "–£–∫–∞–∂–∏ —Ç–µ–≥ –ø–æ—Å–ª–µ .ideas (–Ω–∞–ø—Ä–∏–º–µ—Ä, .ideas –≥–µ–Ω–∏–∞–ª—å–Ω–æ)")
            return

        ideas = []
        async for msg in self._client.iter_messages(self.chat, limit=100):
            if f"#{tag}" in msg.text:
                ideas.append(msg.text)

        if not ideas:
            await utils.answer(message, self.strings["no_ideas"])
        else:
            ideas_text = "\n".join(ideas)
            await utils.answer(message, self.strings["ideas_list"].format(tag=tag, ideas=ideas_text))
